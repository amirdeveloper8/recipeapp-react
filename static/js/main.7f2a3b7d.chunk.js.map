{"version":3,"sources":["components/img/lime-salmon.jpeg","components/recipeBoxs.jsx","components/recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["RecipeBox","props","title","ingredientLines","image","calories","cautions","React","useState","modalIsOpen","setIsOpen","closeModal","className","src","alt","onClick","map","caution","style","paddingLeft","isOpen","onAfterOpen","onRequestClose","contentLabel","class","ing","Recipe","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","image1","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,MAA0B,yC,wBC+D1BA,EA5DG,SAACC,GAAW,IACpBC,EAAsDD,EAAtDC,MAAOC,EAA+CF,EAA/CE,gBAAiBC,EAA8BH,EAA9BG,MAAOC,EAAuBJ,EAAvBI,SAAUC,EAAaL,EAAbK,SADtB,EAGMC,IAAMC,UAAS,GAHrB,mBAGpBC,EAHoB,KAGPC,EAHO,KAY3B,SAASC,IACPD,GAAU,GAEZ,OACE,qBAAKE,UAAU,8BAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKC,IAAKT,EAAOU,IAAKZ,IACtB,sBAAKU,UAAU,cAAf,UACE,oBAAIG,QAhBZ,WACEL,GAAU,IAeJ,SAAyBR,IACzB,qBAAKU,UAAU,iBAAf,SACE,4CACcP,EACZ,uBAFF,aAGa,IACVC,EAASU,KAAI,SAACC,GAAD,OACZ,sBAAoBC,MAAO,CAAEC,YAAa,GAA1C,SACGF,GADQA,WAMjB,8BACE,eAAC,IAAD,CACEG,OAAQX,EACRY,YA5BZ,aA6BYC,eAAgBX,EAChBY,aAAa,gBAJf,UAME,wBAAQX,UAAU,qBAAqBG,QAASJ,EAAhD,SACE,mBAAGa,MAAM,kBAEX,oBAAIZ,UAAU,qBAAd,SAAoCV,IACpC,mBAAGU,UAAU,oBAAb,SACE,qBAAIA,UAAU,MAAd,0BAEGT,EAAgBa,KAAI,SAACS,GAAD,OACnB,6BAAeA,GAANA,yB,QCmBdC,EAjEA,WACb,IADmB,EAIWlB,mBAAS,IAJpB,mBAIZmB,EAJY,KAIHC,EAJG,OAKSpB,mBAAS,IALlB,mBAKZqB,EALY,KAKJC,EALI,OAMOtB,mBAAS,SANhB,mBAMZuB,EANY,KAMLC,EANK,KAQnBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUE,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBX,EAAWW,EAAKC,MALA,2CAAH,qDAkBf,OACE,sBAAK5B,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKC,IAAK4B,EAAQ3B,IAAI,KACtB,4CACA,uBAAM4B,SAXM,SAACC,GACjBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAQqBlB,UAAU,cAArC,UACE,uBACEiC,KAAK,OACLjC,UAAU,eACVkC,MAAOjB,EACPkB,SApBW,SAACJ,GACpBb,EAAUa,EAAEK,OAAOF,UAqBb,wBAAQD,KAAK,SAASjC,UAAU,uBAAhC,SACE,cAAC,IAAD,YAIN,qBAAKA,UAAU,2BAAf,SACE,qBAAKA,UAAU,MAAf,SACGe,EAAQX,KAAI,SAACiC,GAAD,OACX,cAAC,EAAD,CAEE/C,MAAO+C,EAAOA,OAAOC,MACrB9C,MAAO6C,EAAOA,OAAO7C,MACrBD,gBAAiB8C,EAAOA,OAAO9C,gBAC/BE,SAAU4C,EAAOA,OAAO5C,SACxBC,SAAU2C,EAAOA,OAAO3C,UALnB2C,EAAOA,OAAOC,kBC7ClBC,MARf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f2a3b7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lime-salmon.4972ff2d.jpeg\";","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst RecipeBox = (props) => {\r\n  const { title, ingredientLines, image, calories, cautions } = props;\r\n\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n  return (\r\n    <div className=\"col-lg-4 col-sm-6 col-xs-12\">\r\n      <div className=\"recipe-box\">\r\n        <img src={image} alt={title} />\r\n        <div className=\"recipe-cont\">\r\n          <h5 onClick={openModal}>{title}</h5>\r\n          <div className=\"excerpt-recipe\">\r\n            <p>\r\n              Calories : {calories}\r\n              <br />\r\n              Cautions :{\" \"}\r\n              {cautions.map((caution) => (\r\n                <span key={caution} style={{ paddingLeft: 5 }}>\r\n                  {caution}\r\n                </span>\r\n              ))}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <Modal\r\n              isOpen={modalIsOpen}\r\n              onAfterOpen={afterOpenModal}\r\n              onRequestClose={closeModal}\r\n              contentLabel=\"Example Modal\"\r\n            >\r\n              <button className=\"close-modal-recipe\" onClick={closeModal}>\r\n                <i class=\"fa fa-close\"></i>\r\n              </button>\r\n              <h5 className=\"title-modal-recipe\">{title}</h5>\r\n              <p className=\"text-modal-recipe\">\r\n                <ul className=\"ing\">\r\n                  ingredients :\r\n                  {ingredientLines.map((ing) => (\r\n                    <li key={ing}>{ing}</li>\r\n                  ))}\r\n                </ul>\r\n              </p>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeBox;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport image1 from \"./img/lime-salmon.jpeg\";\r\nimport RecipeBox from \"./recipeBoxs\";\r\nimport { BiSearchAlt } from \"react-icons/bi\";\r\n\r\nconst Recipe = () => {\r\n  const APP_ID = \"3ce0b77b\";\r\n  const APP_KEY = \"0612908fab0b3d078ba4852e9864b833\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState(\"pizza\");\r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n  }, [query]);\r\n\r\n  const getRecipe = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  const updateSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSearch = (e) => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"recipe\">\r\n      <div className=\"header-recipe\">\r\n        <img src={image1} alt=\"\" />\r\n        <h1>Recipe App</h1>\r\n        <form onSubmit={getSearch} className=\"search-form\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"serac-recipe\"\r\n            value={search}\r\n            onChange={updateSearch}\r\n          />\r\n          <button type=\"submit\" className=\"search-button-recipe\">\r\n            <BiSearchAlt />\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className=\"container recipe-details\">\r\n        <div className=\"row\">\r\n          {recipes.map((recipe) => (\r\n            <RecipeBox\r\n              key={recipe.recipe.label}\r\n              title={recipe.recipe.label}\r\n              image={recipe.recipe.image}\r\n              ingredientLines={recipe.recipe.ingredientLines}\r\n              calories={recipe.recipe.calories}\r\n              cautions={recipe.recipe.cautions}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import \"./App.css\";\nimport Recipe from \"./components/recipe\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Recipe />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}